// Maybe make this a separate packages later?
package markdown

use core {string, iter, conv, array}

translate_to_html :: #match #local {}

#overload
translate_to_html :: (s: str, allocator := context.allocator) -> str {
    return translate_to_html(string.split_iter(s, "\n"));
}

#overload
translate_to_html :: (lines: Iterator(str), allocator := context.allocator) -> str {
    output := make(dyn_str, allocator);

    state := Translator_State.{
        state = .Base
    };

    for line: lines {
        // Check for heading.
        if string.starts_with(line, "#") {
            flush_state_to_base(&state, &output);
            hashes := iter.as_iter(line)->take_while(x => x == '#')->count(x => true);

            line = string.advance(line, hashes) |> string.strip_leading_whitespace();

            conv.format(&output, "<h{}>{}</h{}>", hashes, line, hashes);
            continue;
        }

        // Check for bullet list
        if string.starts_with(line, "- ")
            || string.starts_with(line, "* ") {
            set_translator_state(&state, &output, .Inside_Bullet_List);

            line = string.advance(line, 2) |> string.strip_leading_whitespace();

            string.append(&output, "<li>");
            process_single_line(line, &output);
            string.append(&output, "</li>");
            continue;
        }

        // Check for horizontal rule
        if string.starts_with(line, "---") {
            flush_state_to_base(&state, &output);
            string.append(&output, "<hr />");
            continue;
        }

        // Empty lines clear formatting
        if string.empty(line) {
            flush_state_to_base(&state, &output);
            continue;
        }

        // Check for starting a preformatted block.
        if string.starts_with(line, "    ") || string.starts_with(line, "\t") {
            set_translator_state(&state, &output, .Inside_Preformatted_Block);

            if line[0] == '\t' {
                line = string.advance(line, 1);
            } else {
                line = string.advance(line, 4);
            }

            conv.format(&output, "{}\n", line);
            continue;
        }

        set_translator_state(&state, &output, .Inside_Paragraph);

        line = string.strip_whitespace(line);
        string.append(&output, " ");
        process_single_line(line, &output);
    }

    flush_state_to_base(&state, &output);
    return output;
}

#local
process_single_line :: (line_: str, output: &dyn_str) {
    Line_State :: enum { Normal; Bold; Italics; Bold_Italics; Code; }
    line := line_;
    state: Line_State;

    tokens := line_tokenizer(line);
    for tokens {
        next_state := Line_State.Normal;

        if it.is_character {
            string.append(output, it.char);
            continue;
        }

        switch it.action {
            case .Bold         do next_state = .Bold;
            case .Italics      do next_state = .Italics;
            case .Bold_Italics do next_state = .Bold_Italics;
            case .Code         do next_state = .Code;

            case .Link {
                if state != .Code {
                    path := tokens->take_while(x => x.char != ']')->map(x => x.char) |> iter.to_array();

                    iter.next(tokens);
                    iter.next(tokens);

                    link := tokens->take_while(x => x.char != ')')->map(x => x.char) |> iter.to_array();
                    conv.format(output, "<a href=\"{}\">{}</a>", cast([] u8) link, cast([] u8) path);
                }
            }
        }

        if next_state != .Normal {
            if state != .Normal {
                emit_tag_close(state);
                state = .Normal;

            } else {
                state = next_state;
                emit_tag_open(state);
            }
        }
    }

    emit_tag_close(state);

    emit_tag_open :: macro (state: Line_State) {
        switch state {
            case .Bold do string.append(output, "<strong>");
            case .Italics do string.append(output, "<em>");
            case .Bold_Italics do string.append(output, "<strong><em>");
            case .Code do string.append(output, "<code class=\"hljs language-onyx\">");
        }
    }
    
    emit_tag_close :: macro (state: Line_State) {
        switch state {
            case .Bold do string.append(output, "</strong>");
            case .Italics do string.append(output, "</em>");
            case .Bold_Italics do string.append(output, "</em></strong>");
            case .Code do string.append(output, "</code>");
        }
    }
}

#local
line_tokenizer :: (line: str) -> Iterator(Token) {
    return iter.generator(
        &.{ line = line, offset = 0 },

        ctx => {
            if ctx.offset >= ctx.line.length {
                return Token.{}, false;
            }

            ch := ctx.line[ctx.offset];
            switch ch {
                case '*' {
                    if ctx.line[ctx.offset + 1] == '*' && ctx.line[ctx.offset + 2] == '*' {
                        ctx.offset += 3;
                        return .{false, 0, .Bold_Italics}, true;
                    }

                    if ctx.line[ctx.offset + 1] == '*' {
                        ctx.offset += 2;
                        return .{false, 0, .Bold}, true;
                    }

                    ctx.offset += 1;
                    return.{false, 0, .Italics}, true;
                }

                case '`' {
                    ctx.offset += 1;
                    return.{false, 0, .Code}, true;
                }

                case '\\' {
                    defer ctx.offset += 2;
                    return .{ true, ctx.line[ctx.offset + 1] }, true;
                }

                case '[' {
                    defer ctx.offset += 1;
                    return .{false, 0, .Link}, true;
                }

                case #default {
                    ctx.offset += 1;
                    return .{ true, ch }, true;
                }
            }
        }
    );
}

#local
Token :: struct {
    is_character: bool;
    char: u8;
    action: Token_Action;
}

#local
Token_Action :: enum {
    Bold;
    Italics;
    Bold_Italics;
    Code;
    Link;
}

#local
Translator_State :: struct {
    // State to track between lines
    state: State;
    State :: enum {
        Base;
        Inside_Paragraph;
        Inside_Preformatted_Block;
        Inside_Numeric_List;
        Inside_Bullet_List;
    }
}

#local
flush_state_to_base :: (state: &Translator_State, out: &dyn_str) {
    switch state.state {
        case .Inside_Paragraph {
            string.append(out, "</p>");
        }

        case .Inside_Preformatted_Block {
            string.append(out, "</code></pre>");
        }

        case .Inside_Numeric_List {
            string.append(out, "</ol>");
        }

        case .Inside_Bullet_List {
            string.append(out, "</ul>");
        }
    }

    state.state = .Base;
}

#local
set_translator_state :: (state: &Translator_State, out: &dyn_str, s: Translator_State.State) {
    if state.state == s do return;
    
    flush_state_to_base(state, out);

    switch s {
        case .Inside_Paragraph {
            string.append(out, "<p>");
        }

        case .Inside_Preformatted_Block {
            // :Config
            string.append(out, "<pre class=\"hljs language-onyx\"><code>");
        }

        case .Inside_Numeric_List {
            string.append(out, "<ol>");
        }

        case .Inside_Bullet_List {
            string.append(out, "<ul>");
        }
    }

    state.state = s;
}




indent_markdown_deindent :: (s_: str) -> Iterator(str) {
    s := s_;
    whitespace_count := 0;
    for c: s_ {
        if c == '\t' {
            whitespace_count += 1;
        }
        elseif c == ' ' {
            whitespace_count += 1;
        }
        elseif c == '\n' {
            s = string.advance(s, whitespace_count + 1);
            whitespace_count = 0;
        }
        else {
            break;
        }
    }

    return string.split_iter(s, "\n")
        ->map(whitespace_count, (x, c) => {
            if x.length < c do return "";
            return string.advance(x, c);
        });
}
